---
import { frameworks } from '../../data/navigation';
import GitHubButton from './GitHubButton.astro';

const currentPath = Astro.url.pathname;
const isActivePath = (path: string) => {
    const normalizedCurrent = currentPath.replace(/\/+$/, '').toLowerCase();
    const normalizedPath = path.replace(/\/+$/, '').toLowerCase();
    return path === '/' 
        ? (normalizedCurrent === '' || normalizedCurrent === '/') 
        : normalizedCurrent.endsWith(normalizedPath);
};

const GITHUB_USER = 'Marve10s';
const REPO_NAME = 'UltimateAstroTemplate';

const stars = await fetch(`https://api.github.com/repos/${GITHUB_USER}/${REPO_NAME}`)
    .then(res => res.ok ? res.json() : Promise.reject('Failed to fetch'))
    .then(data => data.stargazers_count)
    .catch(() => 0);
---

<header class="top-0 left-0 right-0 z-50">
    <nav class="container mx-auto px-4 py-6">
        {/* Desktop Navigation */}
        <div class="hidden lg:grid grid-cols-[0.5fr_auto_0.5fr] xl:grid-cols-[1fr_auto_1fr] items-center">
            <div></div>
            
            {/* Navigation Links */}
            <div class="bg-gray-900/50 backdrop-blur-md px-2 lg:px-3 xl:px-6 py-2 lg:py-2.5 rounded-full border border-gray-800/50">
                {frameworks.map((framework, index) => (
                    <>
                        {index !== 0 && <span class="mx-1.5 lg:mx-2 xl:mx-4 text-gray-600">|</span>}
                        <a
                            href={framework.path}
                            class:list={[
                                'relative px-1.5 lg:px-2 xl:px-3 py-1 lg:py-1.5 text-[11px] lg:text-xs xl:text-sm transition-all duration-300 font-medium font-sans',
                                isActivePath(framework.path)
                                    ? 'text-white bg-gray-800/80 rounded-lg border border-gray-700/50 shadow-[0_0_15px_rgba(0,0,0,0.3)]'
                                    : 'text-gray-400 hover:text-white'
                            ]}
                        >
                            <span class="relative z-10">{framework.displayName}</span>
                            {isActivePath(framework.path) && (
                                <span 
                                    class="absolute bottom-0 left-0 h-[2px] w-full"
                                    style={`background-color: ${framework.color}`}
                                />
                            )}
                        </a>
                    </>
                ))}
            </div>

            {/* GitHub Links */}
            <div class="flex justify-end items-center gap-3 lg:gap-4 xl:gap-6">
                <a
                    href={`https://github.com/${GITHUB_USER}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="p-1.5 lg:p-2 text-gray-400 hover:text-white bg-gray-900/50 backdrop-blur-md rounded-full border border-gray-800/50 transition-all duration-300 hover:scale-110 flex items-center"
                    aria-label="GitHub Profile"
                >
                    <svg 
                        class="lg:w-[18px] lg:h-[18px] xl:w-[20px] xl:h-[20px]"
                        viewBox="0 0 24 24" 
                        fill="none" 
                        stroke="currentColor" 
                        stroke-width="2" 
                        stroke-linecap="round" 
                        stroke-linejoin="round"
                    >
                        <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22" />
                    </svg>
                </a>

                <GitHubButton 
                    GITHUB_USER={GITHUB_USER}
                    REPO_NAME={REPO_NAME}
                    stars={stars}
                />
            </div>
        </div>

        {/* Mobile Navigation */}
        <div class="lg:hidden flex justify-between items-center">
            <button
                id="mobile-menu-button"
                class="p-2 text-gray-400 hover:text-white"
                aria-label="Toggle Menu"
            >
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
                </svg>
            </button>

            <div 
                id="mobile-menu" 
                class="hidden fixed inset-0 bg-gray-900/95 backdrop-blur-md"
                style="z-index: 100;"
            >
                <div class="container mx-auto px-4 py-8">
                    <div class="flex justify-end">
                        <button
                            id="mobile-menu-close"
                            class="p-2 text-gray-400 hover:text-white"
                            aria-label="Close Menu"
                        >
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                    <nav class="mt-8 flex flex-col gap-4">
                        {frameworks.map(framework => (
                            <a
                                href={framework.path}
                                class:list={[
                                    'px-4 py-2 rounded-lg transition-all duration-200',
                                    isActivePath(framework.path)
                                        ? 'bg-gray-800 text-white'
                                        : 'text-gray-400 hover:text-white hover:bg-gray-800/50'
                                ]}
                            >
                                {framework.displayName}
                                {isActivePath(framework.path) && (
                                    <span 
                                        class="block h-[2px] mt-1 w-12"
                                        style={`background-color: ${framework.color}`}
                                    />
                                )}
                            </a>
                        ))}

                        <div class="mt-6 flex flex-col gap-4">
                            <a
                                href={`https://github.com/${GITHUB_USER}`}
                                target="_blank"
                                rel="noopener noreferrer"
                                class="flex items-center gap-2 px-4 py-2 text-gray-400 hover:text-white rounded-lg hover:bg-gray-800/50 transition-all duration-200"
                            >
                                <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22" />
                                </svg>
                                GitHub Profile
                            </a>

                            <a 
                                href={`https://github.com/${GITHUB_USER}/${REPO_NAME}`}
                                target="_blank"
                                rel="noopener noreferrer"
                                class="flex items-center justify-between px-4 py-2 bg-gradient-to-r from-blue-600/30 to-purple-600/30 hover:from-blue-600/40 hover:to-purple-600/40 text-blue-300 rounded-lg transition-all duration-200 border border-blue-500/20"
                            >
                                <div class="flex items-center gap-2">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                                    </svg>
                                    <span>Most interesting is here!</span>
                                </div>
                                {stars > 0 && (
                                    <span class="px-2 py-0.5 text-sm bg-blue-500/20 rounded-full">
                                        {stars}
                                    </span>
                                )}
                            </a>
                        </div>
                    </nav>
                </div>
            </div>
        </div>
    </nav>
</header>

<script>
    function setupMobileMenu() {
        const button = document.getElementById('mobile-menu-button');
        const closeButton = document.getElementById('mobile-menu-close');
        const menu = document.getElementById('mobile-menu');
        const body = document.body;

        if (!button || !closeButton || !menu || !button.parentNode || !closeButton.parentNode) {
            console.warn('Mobile menu elements not found');
            return;
        }

        // Create new buttons with event listeners
        const newButton = button.cloneNode(true) as HTMLButtonElement;
        const newCloseButton = closeButton.cloneNode(true) as HTMLButtonElement;

        const toggleMenu = () => {
            menu.classList.toggle('hidden');
            body.style.overflow = menu.classList.contains('hidden') ? '' : 'hidden';
        };

        // Add event listeners to new buttons
        newButton.addEventListener('click', toggleMenu);
        newCloseButton.addEventListener('click', toggleMenu);

        // Replace old buttons with new ones
        button.parentNode.replaceChild(newButton, button);
        closeButton.parentNode.replaceChild(newCloseButton, closeButton);

        // Close menu when clicking outside
        const handleOutsideClick = (e: MouseEvent) => {
            const target = e.target as HTMLElement;
            if (target === menu) {
                toggleMenu();
            }
        };
        menu.addEventListener('click', handleOutsideClick);

        // Close menu on escape key
        const handleEscKey = (e: KeyboardEvent) => {
            if (e.key === 'Escape' && !menu.classList.contains('hidden')) {
                toggleMenu();
            }
        };
        document.addEventListener('keydown', handleEscKey);

        // Cleanup function
        return () => {
            menu.removeEventListener('click', handleOutsideClick);
            document.removeEventListener('keydown', handleEscKey);
        };
    }

    let cleanup: (() => void) | undefined;

    // Run setup immediately if document is already loaded
    if (document.readyState === 'complete') {
        cleanup = setupMobileMenu();
    } else {
        // Otherwise wait for DOMContentLoaded
        document.addEventListener('DOMContentLoaded', () => {
            cleanup = setupMobileMenu();
        });
    }
    
    // Setup after each navigation with View Transitions
    document.addEventListener('astro:page-load', () => {
        if (cleanup) {
            cleanup();
        }
        cleanup = setupMobileMenu();
    });
    
    // Cleanup when leaving page
    document.addEventListener('astro:before-swap', () => {
        if (cleanup) {
            cleanup();
        }
        const menu = document.getElementById('mobile-menu');
        const body = document.body;
        if (menu && !menu.classList.contains('hidden')) {
            menu.classList.add('hidden');
            body.style.overflow = '';
        }
    });
</script>